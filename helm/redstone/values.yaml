# Redstone Helm Chart Values
# Production-mirroring Kubernetes deployment configuration

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Redmica (Redmine fork) Configuration
redmica:
  enabled: true
  
  # Local Redmica image built from source
  image:
    repository: redmica
    tag: "local"
    pullPolicy: Never
  
  replicaCount: 1
  
  # Service configuration - clean, simple
  service:
    type: ClusterIP
    port: 3000
  
  # Security context for production readiness (temporarily disabled for debugging)
  # securityContext:
  #   runAsNonRoot: true
  #   runAsUser: 1000
  #   runAsGroup: 1000
  #   fsGroup: 1000
  
  # Health probes for reliability
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  # Resource limits for stability
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  # Persistence for data and logs
  persistence:
    enabled: true
    size: 5Gi
    logSize: 1Gi
    # storageClass: ""  # Use default
  
  # Environment configuration - clean, explicit
  env:
    - name: RAILS_ENV
      value: "production"
    - name: RACK_ENV
      value: "production"
    - name: SECRET_KEY_BASE
      valueFrom:
        secretKeyRef:
          name: redstone-secrets
          key: secret-key-base
    - name: REDMINE_DB_ADAPTER
      value: "postgresql"
    - name: REDMINE_DB_HOST
      value: "redstone-postgresql-custom"
    - name: REDMINE_DB_PORT
      value: "5432"
    - name: REDMINE_DB_DATABASE
      value: "redmica"
    - name: REDMINE_DB_USERNAME
      value: "redmica"
    - name: REDMINE_DB_PASSWORD
      value: "redmica123"

# PostgreSQL Configuration (using Bitnami chart)
# Disable Bitnami PostgreSQL chart to use our custom StatefulSet
postgresql:
  enabled: false

# Custom PostgreSQL configuration for standard postgres:latest container
postgresqlCustom:
  enabled: true
  auth:
    postgresPassword: "redstone123"
    username: "redmica"
    password: "redmica123"
    database: "redmica"
  primary:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  primary:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# Redis Configuration (using Bitnami chart)
redis:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: "7.0.5-debian-11-r7"
    pullPolicy: IfNotPresent
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 2Gi
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# LDAP Configuration
ldap:
  enabled: true
  image:
    repository: lldap/lldap
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 3890
    targetPort: 3890
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Security context temporarily removed for investigation
  # securityContext:
  #   runAsNonRoot: true
  #   runAsUser: 1001
  #   runAsGroup: 1001
  #   fsGroup: 1001
  #   readOnlyRootFilesystem: false
  
  env:
    - name: LLDAP_LDAP_PORT
      value: "3890"
    - name: LLDAP_JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: redstone-secrets
          key: ldap-jwt-secret
    - name: LLDAP_LDAP_USER_PASS
      valueFrom:
        secretKeyRef:
          name: redstone-secrets
          key: ldap-admin-password

# Loki Configuration (using Grafana chart) - DISABLED to avoid grafana-agent-operator ClusterRole conflicts
loki:
  enabled: false
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
    schemaConfig:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
  singleBinary:
    replicas: 1
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    persistence:
      enabled: true
      size: 10Gi

# Grafana Configuration (using Grafana chart)
grafana:
  enabled: true
  adminPassword: "admin123"
  
  # Fix subpath configuration for Release.com deployment
  grafana.ini:
    server:
      serve_from_sub_path: true
      root_url: "%(protocol)s://%(domain)s/grafana/"
  
  # Fix ClusterRole naming conflicts between environments
  rbac:
    create: false
    namespaced: true
  
  # Disable all optional components that might create ClusterRoles
  sidecar:
    dashboards:
      enabled: false
    datasources:
      enabled: false
  
  # Disable agent operator and other optional components that create ClusterRoles
  agent:
    enabled: false
  
  # Explicitly disable grafana-agent-operator
  grafana-agent-operator:
    enabled: false
  
  grafanaOperator:
    enabled: false
    
  service:
    type: ClusterIP
    port: 3000
  
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.local
    path: /
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  persistence:
    enabled: true
    size: 2Gi
  
  # Mount ConfigMaps for provisioning
  extraConfigmapMounts:
    - name: datasources-configmap
      mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
      configMap: redstone-grafana-datasources
      subPath: datasources.yaml
      readOnly: true
    - name: dashboards-configmap
      mountPath: /var/lib/grafana/dashboards/redstone-dashboards
      configMap: redstone-grafana-dashboards
      subPath: ""
      readOnly: true
    - name: metrics-dashboards-configmap
      mountPath: /var/lib/grafana/dashboards/redstone-metrics
      configMap: redstone-grafana-dashboard-metrics
      subPath: ""
      readOnly: true
    - name: working-dashboards-configmap
      mountPath: /var/lib/grafana/dashboards/redstone-working
      configMap: redstone-grafana-dashboard-working
      subPath: ""
      readOnly: true
  
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'redstone-dashboards'
          orgId: 1
          folder: 'Redstone'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/redstone-dashboards
        - name: 'redstone-metrics'
          orgId: 1
          folder: 'Redstone'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/redstone-metrics
        - name: 'redstone-working'
          orgId: 1
          folder: 'Redstone'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/redstone-working

# Prometheus Configuration (using Prometheus chart)
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    # Add proper Kubernetes labels following best practices
    podLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: server
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  nodeExporter:
    enabled: true
    # Resource limits for node exporter pods
    nodeExporter:
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi

# Logging Configuration
logging:
  # Enable Fluent Bit for log collection
  fluentBit:
    enabled: true
    image:
      repository: grafana/fluent-bit-plugin-loki
      tag: "2.9.1-arm64"
    
    # Security context for non-root execution
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      readOnlyRootFilesystem: false  # Fluent Bit needs write access for buffers
    
    # Health probes for reliability
    livenessProbe:
      httpGet:
        path: /
        port: 2020
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /
        port: 2020
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    
    config:
      service: |
        [SERVICE]
            Daemon Off
            Flush 1
            Log_Level error
            Parsers_File parsers.conf
            HTTP_Server On
            HTTP_Listen 0.0.0.0
            HTTP_Port 2020
            Health_Check On
      
      inputs: |
        [INPUT]
            Name tail
            Path /var/log/containers/*.log
            multiline.parser docker, cri
            Tag kube.*
            Mem_Buf_Limit 50MB
            Skip_Long_Lines On
        
        [INPUT]
            Name tail
            Path /var/log/containers/*postgresql*.log
            multiline.parser docker, cri
            Tag kube.var.log.containers.postgresql
            Mem_Buf_Limit 50MB
            Skip_Long_Lines On
      
      filters: |
        [FILTER]
            Name kubernetes
            Match kube.*
            Kube_URL https://kubernetes.default.svc:443
            Kube_CA_File /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            Kube_Token_File /var/run/secrets/kubernetes.io/serviceaccount/token
            Kube_Tag_Prefix kube.var.log.containers.
            Merge_Log On
            Keep_Log Off
            K8S-Logging.Parser On
            K8S-Logging.Exclude On
            Annotations Off
            Labels On
        
        [FILTER]
            Name grep
            Match kube.*
            Exclude kubernetes_labels_app_kubernetes_io_name loki

      
      outputs: |
        [OUTPUT]
            Name loki
            Match kube.*
            Host loki
            Port 3100
            Labels job=fluentbit
            Auto_Kubernetes_Labels On
