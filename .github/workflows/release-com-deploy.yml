name: Release.com Deployment
# Following the "Built for Clarity" design philosophy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  RELEASE_API_TOKEN: ${{ secrets.RELEASE_API_TOKEN }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Build and test job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build services
        run: |
          echo "Building Docker services..."
          docker-compose build --parallel
      
      - name: Run health checks
        run: |
          echo "Starting services for health checks..."
          docker-compose up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Check service health
          echo "Checking service health..."
          docker-compose ps
          
          # Test API health endpoint
          curl -f http://localhost:8081/health || exit 1
          
          echo "All services are healthy"
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  # Deploy to development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Release.com CLI dependencies
        run: |
          pip install requests
      
      - name: Load development environment
        run: |
          cp deploy/release/environments/development/.env.example .env
          echo "RELEASE_API_TOKEN=${{ secrets.RELEASE_API_TOKEN }}" >> .env
          echo "Environment configuration loaded for development"
      
      - name: Deploy to Release.com Development
        run: |
          echo "Deploying to Release.com development environment..."
          python deploy/release/api/client.py deploy \
            --app-id ${{ secrets.RELEASE_DEV_APP_ID }} \
            --env-id ${{ secrets.RELEASE_DEV_ENV_ID }}
        env:
          RELEASE_API_TOKEN: ${{ secrets.RELEASE_API_TOKEN }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Release.com CLI dependencies
        run: |
          pip install requests
      
      - name: Load staging environment
        run: |
          cp deploy/release/environments/staging/.env.example .env
          echo "RELEASE_API_TOKEN=${{ secrets.RELEASE_API_TOKEN }}" >> .env
          echo "Environment configuration loaded for staging"
      
      - name: Deploy to Release.com Staging
        run: |
          echo "Deploying to Release.com staging environment..."
          python deploy/release/api/client.py deploy \
            --app-id ${{ secrets.RELEASE_STAGING_APP_ID }} \
            --env-id ${{ secrets.RELEASE_STAGING_ENV_ID }}
        env:
          RELEASE_API_TOKEN: ${{ secrets.RELEASE_API_TOKEN }}

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Release.com CLI dependencies
        run: |
          pip install requests
      
      - name: Load production environment
        run: |
          cp deploy/release/environments/production/.env.example .env
          echo "RELEASE_API_TOKEN=${{ secrets.RELEASE_API_TOKEN }}" >> .env
          echo "Environment configuration loaded for production"
      
      - name: Deploy to Release.com Production
        run: |
          echo "Deploying to Release.com production environment..."
          python deploy/release/api/client.py deploy \
            --app-id ${{ secrets.RELEASE_PROD_APP_ID }} \
            --env-id ${{ secrets.RELEASE_PROD_ENV_ID }}
        env:
          RELEASE_API_TOKEN: ${{ secrets.RELEASE_API_TOKEN }}

  # PR Preview Environments
  deploy-pr-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: pr-preview
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Release.com CLI dependencies
        run: |
          pip install requests
      
      - name: Create PR preview environment
        run: |
          echo "Creating PR preview environment for PR #${{ github.event.number }}"
          # This would create a temporary environment for the PR
          # Implementation depends on Release.com's PR preview capabilities
          echo "PR preview would be deployed here"
        env:
          RELEASE_API_TOKEN: ${{ secrets.RELEASE_API_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          PR_BRANCH: ${{ github.head_ref }}
